#include "./exportUtil.jsxinc"
function getLayerKeys(layer, startTime, duration) {
	var comp = layer.containingComp;

	function getFrameTime(f) {
		return startTime + f*comp.frameDuration;
	}
	endFrame = function() {
		return Math.ceil(duration/comp.frameDuration)+1;
	}();
	function procKeys(target, valueFunc)
	{
		var ret = new Object();
		var prevValue = null;
		for(var f = 0; f < endFrame; ++f) {
			var val = valueFunc(target, getFrameTime(f));
			if(!ExportUtil.compare(prevValue, val)) {
				ret[f] = val;
				prevValue = val;
			}
		}
		return ret;
	}
	function procShapeKeys(dst, target)
	{
		var size = target.value.vertices.length;
		var props = [
			"vertices",
			"inTangents",
			"outTangents"
		];
		for(var j = 0; j < props.length; ++j) {
			var prop = props[j];
			dst[prop] = new Array();
			for(var i = 0; i < size; ++i) {
				dst[prop].push(procKeys(target, function(p,time){return p.valueAtTime(time,true)[prop][i];}));
			}
		}
	}
	function procShapeContent(prop) {
		var ret = new Object();
		ret.name = prop.name;
		ret.mname = prop.matchName;
		function addPropArray(dst, propNames, prop) {
			for(var i = 0; i < propNames.length; ++i) {
				var propName = propNames[i];
				if(prop.property(propName)) {
					dst[propName.replace(/ /,"")] = procKeys(prop.property(propName), function(prop,time){return prop.valueAtTime(time,true);});
				}
			}
		}
		if(prop.matchName.indexOf("Shape") >= 0) {
			ret.inverse = prop.property("ADBE Vector Shape Direction").value > 2;
			if(prop.matchName.indexOf("Ellipse") >= 0) {
				ret.type = "ellipse";
				var propNames = [
					"Size",
					"Position"
				];
				addPropArray(ret, propNames, prop);
			}
			else if(prop.matchName.indexOf("Rect") >= 0) {
				ret.type = "rect";
				var propNames = [
					"Size",
					"Position",
					"Roundness"
				];
				addPropArray(ret, propNames, prop);
			}
			else if(prop.matchName.indexOf("Star") >= 0) {
			}
			else {
				ret.type = "path";
				ret.path = new Object();
				procShapeKeys(ret.path, prop.property("ADBE Vector Shape"));
			}
		}
		else if(prop.matchName.indexOf("Graphic") >= 0) {
			if(prop.matchName.indexOf("G-Stroke") >= 0) {
			}
			else if(prop.matchName.indexOf("Stroke") >= 0) {
				ret.type = "stroke";
				var propNames = [
					"Color",
					"Opacity",
					"Stroke Width"
				];
				addPropArray(ret, propNames, prop);
			}
			else if(prop.matchName.indexOf("G-Fill") >= 0) {
			}
			else if(prop.matchName.indexOf("Fill") >= 0) {
				ret.type = "fill";
				var propNames = [
					"Color",
					"Opacity"
				];
				addPropArray(ret, propNames, prop);
			}
		}
		else if(prop.matchName.indexOf("Filter") >= 0) {
		}
		else if(prop.matchName.indexOf("Materials") >= 0) {
		}
		else if(prop.matchName.indexOf("Transform") >= 0) {
			ret.type = "transform";
			var propNames = [
				"Position",
				"Scale",
				"Rotation",
				"Anchor Point",
				"Opacity",
				"Skew",
				"Skew Axis"
			];
			addPropArray(ret, propNames, prop);
		}
		else if(prop.matchName.indexOf("Group") >= 0) {
			ret.type = "group";
			ret.contents = new Array();
			for(var i = 1; i <= prop.numProperties; ++i) {
				if(prop.enabled) {
					addShapeContent(ret.contents, prop.property(i));
				}
			}
		}
		return ret;
	}
	function addShapeContent(dst, prop) {
		if(prop.enabled) {
			if(prop.matchName.indexOf("Vectors Group") >= 0) {
				for(var i = 1; i <= prop.numProperties; ++i) {
					addShapeContent(dst, prop.property(i));
				}
			}
			else {
				dst.push(procShapeContent(prop));
			}
		}
	}
	function isMaskHasKeys(mask)
	{
		if(mask.property("maskShape").numKeys > 0) {
			return true;
		}
		return false;
	}

	function proc() {
		var obj = new Object();

		obj.active = procKeys(layer, function(l,time){return l.activeAtTime(time);});
		var propNames = [
			"Position",
			"Scale",
			"Opacity",
			"Rotation X",
			"Rotation Y",
			"Rotation Z",
			"Anchor Point",
			"Orientation",
			"Zoom"
		];
		for(var i = 0; i < propNames.length; ++i) {
			var propName = propNames[i];
			if(layer.property(propName)) {
				obj[propName.replace(/ /,"")] = procKeys(layer.property(propName), function(prop,time){return prop.valueAtTime(time,true);});
			}
		}
		if(layer.mask && layer.mask.numProperties > 0) {
			obj.mask = new Array();
			for(var i = 1; i <= layer.mask.numProperties; ++i) {
				var m = layer.mask(i);
				var mask = new Object();
				mask.name = m.name;
				mask.mode = ExportUtil.MASKMODE_TABLE[m.maskMode];
				mask.inverted = m.inverted;
				procShapeKeys(mask, m.property("maskShape"));
				obj.mask.push(mask);
			}
		}
		var prop = layer.property("ADBE Root Vectors Group");
		if(prop) {
			obj.contents = new Array();
			addShapeContent(obj.contents, prop);
		}
		return obj;
	}
	return proc();
}
// -----------------------------------
